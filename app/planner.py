import os
import json
from openai import OpenAI

class planner:
    """
    Parameters:
    - planner_api_key (str): API key for the planner client
    - planner_base_url (str): Base URL for the planner client
    - planner_model (str): Model to be used by the planner client
    - controlledOS (str): The operating system being controlled
    - run_folder (str): The folder to store the run data
    - query (str): The user's query

    Returns:
    - completion (str): The full output of LLM
    - thinking (str): LLM's thinking process
    - tasks (arr): The task List generated by LLM
        - task (str): The task to be completed
        - requires_previous_output (bool): Whether the previous task is required
    """
    def __init__(self, planner_api_key, planner_base_url, planner_model):
        self.planner_client = OpenAI(
            api_key=planner_api_key,
            base_url=planner_base_url,
        )
        self.planner_model = planner_model
        self.controlledOS = os.environ["CONTROLLED_OS"]
        self.run_folder = os.environ["RUN_FOLDER"]

    def _get_system_prompt(self):
        return f"""
You are a planner.
You need to help me use {self.controlledOS} system according to the following information.
You need to imitate the actions of humans operating computers to split tasks.
When a certain task requires the information obtained by the preamble task as input, please set requires_previous_output to True. Generally speaking, it is only used when extracting information from one page to another.

## Output format:
```json
{{
    "thinking": "Describe your thoughts on how to achieve the user's query.",
    "tasks":  [{{"task": "task description", "requires_previous_output": true/false}}, {{"task": "task description", "requires_previous_output": true/false}}]
}}
```

## Output example:
```json
{{
    "thinking": "In order to play Bilibili's 'apex' video, I need to open the Bilibili website first, and then search for apex related videos, click one of them to play.",
    "tasks":  [{{"task": "Search and enter the 'https://www.bilibili.com/' website", "requires_previous_output": false}}, {{"task": "Search 'apex' in the search box and confirm", "requires_previous_output": false}}, {{"task": "Click on the first video to play", "requires_previous_output": false}}]
}}
```

## Note:
- When you need to search for content on the Web, you will first open a search result that contains multiple pages, and you need to click on the right page first to get the relevant information.
- Make sure to return to the desktop before opening any software, and then look for opening it. Use the ['win', 'd'] shortcut keys to return to the desktop under Windows system.
"""


    def _parse_tasks(self, content):
        json_str = content.replace("```json","").replace("```","").strip()
        json_dict = json.loads(json_str)
        return json_dict["thinking"], json_dict["tasks"]

    def __call__(self, query):
        messages=[
            {
                "role": "system",
                "content": self._get_system_prompt(),
            },
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": query},
                ],
            }
        ]
        completion = self.planner_client.chat.completions.create(
            model=self.planner_model,
            messages=messages
        )
        content = completion.choices[0].message.content
        thinking, tasks = self._parse_tasks(content)
        
        with open(os.path.join(self.run_folder, 'memory.json'), 'r+') as memory_file:
            memory_data = json.load(memory_file)
            memory_data["tasks"].extend(tasks)
            memory_file.seek(0)
            json.dump(memory_data, memory_file, indent=4)
            memory_file.truncate()
        
        return completion, thinking, tasks
