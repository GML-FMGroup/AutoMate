import json
import os
import platform
from openai import OpenAI
from utils import get_base64_screenshot

class dispatcher:
    """
    Parameters:
    - dispatcher_api_key (str): API key for the dispatcher client
    - dispatcher_base_url (str): Base URL for the dispatcher client
    - dispatcher_model (str): Model to be used by the dispatcher client
    - task (str): The task generated by planner

    Returns:
    - completion (str): The full output of LLM
    - thinking (str): LLM's thinking process
    - subtasks (arr): The task List generated by LLM
        - executor (str): The executor to be used
        - subtask (str): The subtask to be executed
    """
    def __init__(self, dispatcher_api_key, dispatcher_base_url, dispatcher_model):
        self.dispatcher_client = OpenAI(
            api_key=dispatcher_api_key,
            base_url=dispatcher_base_url,
        )
        self.dispatcher_model = dispatcher_model
        self.controlledOS = platform.system()
        self.run_folder = os.environ["RUN_FOLDER"]

    def _get_executor_description(self):
        with open('./executors/executor_list.json', 'r') as file:
            executors = json.load(file)
        executor_list = "\n".join([f"- {executor['name']}: {executor['description']}" for executor in executors])
        return executor_list

    def _get_system_prompt(self):
        return f"""
You are a dispatcher.
You need to help me use {self.controlledOS} system according to the following information.
You need to split tasks into subtasks based on the executor's capabilities and picture, making sure that each subtask is a single step of the executor.
A subtask contains only one action. If multiple actions are needed, please list them in subtasks.
The subtask you gave should be concise and clear, for example: enter xxx and click xxx.
I may provide you with some information obtained by the preamble task. When you need this information when generating a subtask, please organize the data and keep the subtask concise principle. The subtask should be: enter xxx (the information you have sorted out)

## executor options:
{self._get_executor_description()}

## Output format:
```json
{{
    "thinking": "Describe your thoughts on how to achieve the task.",
    "subtasks": [{{"executor": "option", "subtask": "subtask that needs to be completed by executor"}}, ...],
}}
```

## Output example1:
```json
{{
    "thinking": "I now need to extract ten quotes of Bill Gates from the page somewhere else, so I use the ocr executor to extract the text.",
    "subtasks": [{{"executor": "ocr_executor", "subtask": "Extract ten quotes of Bill Gates from the image."}}]
}}
## Output example2:
```json
{{
    "thinking": "In order to search for Bill Gates' famous quotes, I need to first click on the search box, enter "Bill Gates' famous quotes", and press Enter to search.",
    "subtasks": [{{"executor": "interact_executor", "subtask": "Click the search box."}}, {{"executor": "interact_executor", "subtask": "Enter 'Bill Gates' famous quotes'."}}, {{"executor": "interact_executor", "subtask": "Press Enter."}}]
}}
```
## Output example3:
```json
{{
    "thinking": "I need to move the mouse to the position I need to scroll, that is, the middle of the web page and scroll.",
    "subtasks": [{{"executor": "scroll_executor", "subtask": "Move the mouse to the middle of the web page and scroll the mouse."}}]
}}
```

## Note:
- If the current page needs to wait for the loading to be completed or the target information is not found, use wait or scroll_executor. Then you will dispatch it again for the current target, and other executors will not.
- When you choose scroll executor or wait, the subtasks array can only have one subtask. I'll redispatch later.
- When you perform operations such as saving files that can be completed with keyboard shortcuts, please try to use shortcuts and pay attention to the differences in shortcuts in different systems.
- When you need to rely on code to generate files, please clarify the file type and specific data you have obtained before.
"""
    
    def _get_user_prompt(self, task):
        with open(os.path.join(self.run_folder, 'memory.json'), 'r') as file:
            memory_data = json.load(file)["data"]
        return f"""
## Instruction:
Please complete my task and selectively use the information obtained before.
## Task:
{task}
## Information obtained from the previous task:
{memory_data}
"""
    
    def _parse_subtasks(self, content):
        json_str = content.replace("```json","").replace("```","").strip()
        json_dict = json.loads(json_str)
        return json_dict["thinking"], json_dict["subtasks"]

    def __call__(self, task, min_pixels=3136, max_pixels=12845056):
        base64_screenshot = get_base64_screenshot(self.run_folder)

        messages=[
            {
                "role": "system",
                "content": self._get_system_prompt(),
            },
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": self._get_user_prompt(task)},
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/png;base64,{base64_screenshot}"},
                    },
                ],
            }
        ]
        completion = self.dispatcher_client.chat.completions.create(
            model=self.dispatcher_model,
            messages=messages
        )
        content = completion.choices[0].message.content
        thinking, subtasks = self._parse_subtasks(content)

        with open(os.path.join(self.run_folder, 'memory.json'), 'r+') as memory_file:
            memory_data = json.load(memory_file)
            for task_item in memory_data["tasks"]:
                if task_item["task"] == task:
                    if "subtasks" not in task_item:
                        task_item["subtasks"] = []
                    task_item["subtasks"].extend(subtasks)
                    break
            memory_file.seek(0)
            json.dump(memory_data, memory_file, indent=4)
            memory_file.truncate()

        return completion, thinking, subtasks
